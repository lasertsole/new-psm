constants:
  # redis配置
  redis:
    host: 127.0.0.1
    # 端口
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password: 123456

spring:
  #开发环境申明
  config:
    activate:
      on-profile: dev
#  main:
#    allow-circular-references: true #循环引用
  #配置文件编码
  mvc:
    content-negotiation-manager:
      #默认编码
      default-charset: UTF-8
#静态文件上传配置
  servlet:
    multipart:
      location: /var/www/uploads/  # 临时文件存储位置
      max-file-size: 200MB  # 单个文件的最大大小
      max-request-size: 250MB  # 单次请求的最大总大小

#redis的主机ip及端口
  data:
    redis:
      host: ${constants.redis.host}
      # 端口
      port: ${constants.redis.port}
      # 数据库索引
      database: ${constants.redis.database}
      # 密码
      password: ${constants.redis.password}
      # 连接超时时间
      timeout: 10s
      #lettuce连接池配置
      lettuce:
        pool:
          #最大连接数
          max-active: 32
          #最大阻塞等待时间数（负数表示没有限制）
          max-wait: -1
          #最大空闲
          max-idle: 16
          #最小空闲
          min-idle: 0
        #连接超时时间
        timeout: 2000a

  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

#mysql数据库连接配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      url: jdbc:postgresql://127.0.0.1:5432/psm?serverTimezone=UTC
      username: admin
      password: 123456
      driver-class-name: org.postgresql.Driver

  security:
    #jwt配置
    jwt:
      #jwt签发者
      issuer: moye
      #jwt加密密钥
      secret: moyesprite
      #jwt过期时间
      expiration: 86400000 #24小时,单位为毫秒
      #jwt刷新时间
      refresh-expiration: 3600000 #15分钟,单位为毫秒

    request-matcher:
      anonymous:
        - /users/login
        - /users/register
      permit-all:
        - /models

    oauth2:
      client:
        registration:
          github:
            client-id: Ov23lilO28AYKuoWOkPs
            client-secret: 818af0dbaf48927dfd7770b25f47c59157a04ee7
            authorizationGrantType: authorization_code
            redirect-uri: http://localhost:8000/login/oauth2/code/github
            scope:
              - read:user
              - user:email

          gitee:
            client-id: 8bdd02308c94e52fc7ff018d863ea0a1ef4c3f4b454c456ef9dfec592ed310dd
            client-secret: f13885c4ae4f0874aca433793f36994b9521fada1d776ebd4faa84f5a7e874d7
            authorizationGrantType: authorization_code
            redirect-uri: http://localhost:8000/login/oauth2/code/gitee
            scope:
              - user_info

        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: login

          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-info-uri: https://gitee.com/api/v5/user
            user-name-attribute: name

      authorization-base-uri: /oauth2/authorization

#mybaitis-plus配置
mybatis-plus:
  workerId: 1
  datacenterId: 1
  global-config:
    db-config:
#      table-prefix: tb_ #数据表前缀
      id-type: ASSIGN_ID # 全局配置id生成策略为雪花算法
      logic-delete-field: deleted #全局逻辑删除的实体字段名
      logic-delete-value: true #逻辑已删除值(默认为 1)
      logic-not-delete-value: false #逻辑未删除值(默认为 0)
  configuration:
    map-underscore-to-camel-case: true #开启驼峰命名
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #日志配置
  #实体类所对应的包（如果不配置，则需要配置TableName注解）
#  type-aliases-package: com.psm.domain
  #扫描通用枚举的包
  type-enums-package: com.psm.domain, com.psm.types.enums

#阿里云配置信息
aliyun:
  #oss服务
  oss:
    endpoint: https://oss-cn-guangzhou.aliyuncs.com
    access-key-id: LTAI5t8QXMXdHCpCorzzkVi2
    access-key-secret: Bv31pl1AcYEryStLmeN1cJksmshROK
    bucket-name: new-psm

    #oss文件路径配置
    path:
      models:
        coverFolderPath: "{userId}/models/covers"
        entityFolderPath: "{userId}/models/entities"
      subtitles:
        coverFolderPath: "{userId}/subtitles/covers"
        videoFolderPath: "{userId}/subtitles/videos"
      users:
        avatarFolderPath: "{userId}/users/avatars"

# websocket配置
socketio:
  # 监听的ip和端口
  host: localhost
  port: 8001
  # 设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器
  max-frame-payload-length: 1048576
  # 设置http交互最大内容长度
  max-http-content-length: 1048576
  # boss线程组大小
  boss-count: 1
  # 工作线程组大小
  work-count: 100
  # 是否允许自定义请求，默认false
  allow-custom-requests: true
  # 协议升级超时时间（毫秒），默认10秒。HTTP握手升级为ws协议超时时间
  upgrade-timeout: 1000000
  # Ping消息超时时间（毫秒），默认60秒，这个时间间隔内没有接收到心跳消息就会发送超时事件
  ping-timeout: 6000000
  # Ping消息间隔（毫秒），默认25秒。客户端向服务器发送一条心跳消息间隔
  ping-interval: 25000
  # 应用配置
  app:
    configuration:
      DMExpireDay: 7
      DMMaxInitCountInPage: 50 # 分批初始化时每页最大数量，按照实际情况跳转

# jetCache多級緩存
jetcache:
  statIntervalMinutes: 15 # 統計信息收集間隔
  areaInCacheName: false # 是否在缓存名上添加区域标识
  hidePackages: com.example # 隱藏包名
  local: # 本地緩存配置
    default:
      type: caffeine
      limit: 100 # 緩存數量
      keyConvertor: fastjson # key轉換器
      expireAfterWriteInMillis: 100000 #寫入後過期時間
    otherArea: # 其他區域
      type: linkedhashmap
      limit: 100
      keyConvertor: none
      expireAfterWriteInMillis: 100000
  remote: # 遠程緩存配置
    default:
      type: redis
      keyConvertor: fastjson
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: 5 # 连接池最小空闲连接数
        maxIdle: 20 # 连接池最大空闲连接数
        maxTotal: 50 # 连接池最大连接数
      host: ${spring.data.redis.host}
      port: ${spring.data.redis.port}
      password: ${spring.data.redis.password}
    otherArea:
      type: redis
      keyConvertor: fastjson
      valueEncoder: kryo
      valueDecoder: kryo
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      host: ${spring.data.redis.host}
      port: ${spring.data.redis.port}
      password: ${spring.data.redis.password}

#服务器地址及端口
server:
  # Undertow配置
  undertow:
    # io线程池数量
    io-threads: 8
    # 工作线程池数量
    worker-threads: 200
    # 缓冲池大小
    buffer-pool: 16M
  protocol: http
  port: 8000
  address: 127.0.0.1
  front-end-url:
    socket: localhost:3000
    login-page: /loginOrRegister/login
    third-login-page: /loginOrRegister/thirdLogin